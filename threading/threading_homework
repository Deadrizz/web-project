import asyncio
import threading
import time
def is_prime(number:int):
    if number < 2:
        return False
    for num in range(2,number):
        if number % num == 0:
            return False
    return True
list_of_prime_number = []
def finds_primes_single_thread(start:int,end:int):
    if start > end:
        return False
    elif start < 2 or end < 2:
        return False
    for num in range(start,end+1):
        if is_prime(num):
            list_of_prime_number.append(num)
    return list_of_prime_number
start = time.perf_counter()
print(finds_primes_single_thread(2,100))
end = time.perf_counter()
print(f"Time spent on prime numbers: {end - start:2f}")
result_list = []
def find_primes_multi_thread(start:int, end:int):
    for num in range(start,end+1):
        if is_prime(num):
            result_list.append(num)
    return result_list
start_number = 2
end_number = 100
mid_number = (start_number + end_number)// 2
start = time.perf_counter()
thread1 = threading.Thread(target=find_primes_multi_thread, args=(start_number,int(mid_number)))
thread2 = threading.Thread(target=find_primes_multi_thread, args=(int(mid_number),end_number))
thread1.start()
thread2.start()
thread1.join()
thread2.join()
end = time.perf_counter()
print(result_list)
print(f"Time spent on prime numbers: {end - start:2f}")
# для цієї задачі більше підходить виконання одним потоком,тому що для многопоточності додаються більші витрати на переключення потоків
